import React, { useState, useEffect } from "react";
import "./style.css";

export default function AccountManager() {
  const [users, setUsers] = useState([]);
  const [form, setForm] = useState({ id: null, username: "", email: "", password: "", role: "user" });
  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    const allUsers = JSON.parse(localStorage.getItem("users") || "[]");
    setUsers(allUsers);
  }, []);

  useEffect(() => {
    localStorage.setItem("users", JSON.stringify(users));
  }, [users]);

  const handleChange = (e) => setForm({ ...form, [e.target.name]: e.target.value });

  const handleAdd = () => {
    if (!form.username || !form.email || !form.password) {
      return alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
    }
    if (users.find(u => u.email === form.email)) return alert("Email ƒë√£ t·ªìn t·∫°i!");
    const newUser = { ...form, id: Date.now() };
    setUsers([...users, newUser]);
    setForm({ id: null, username: "", email: "", password: "", role: "user" });
  };

  const handleEdit = (user) => {
    setForm(user);
    setIsEditing(true);
  };

  const handleUpdate = () => {
    setUsers(users.map(u => u.id === form.id ? form : u));
    setForm({ id: null, username: "", email: "", password: "", role: "user" });
    setIsEditing(false);
  };

  const handleDelete = (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?")) {
      setUsers(users.filter(u => u.id !== id));
    }
  };

  return (
    <section className="dashboard">
      <h2>üë§ Qu·∫£n l√Ω t√†i kho·∫£n</h2>
      <p>Danh s√°ch ng∆∞·ªùi d√πng trong h·ªá th·ªëng</p>

      <div className="form-add-edit">
        <input name="username" placeholder="T√™n ng∆∞·ªùi d√πng" value={form.username} onChange={handleChange} />
        <input name="email" placeholder="Email" value={form.email} onChange={handleChange} />
        <input name="password" type="password" placeholder="M·∫≠t kh·∫©u" value={form.password} onChange={handleChange} />
        <select name="role" value={form.role} onChange={handleChange}>
          <option value="user">User</option>
          <option value="admin">Admin</option>
        </select>
        {isEditing ? (
          <button className="btn-edit" onClick={handleUpdate}>C·∫≠p nh·∫≠t</button>
        ) : (
          <button className="btn-edit" onClick={handleAdd}>Th√™m</button>
        )}
      </div>

      <table className="sales-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>T√™n ng∆∞·ªùi d√πng</th>
            <th>Email</th>
            <th>Vai tr√≤</th>
            <th>Thao t√°c</th>
          </tr>
        </thead>
        <tbody>
          {users.map(u => (
            <tr key={u.id}>
              <td>{u.id}</td>
              <td>{u.username}</td>
              <td>{u.email}</td>
              <td>{u.role}</td>
              <td>
                <button className="btn-edit" onClick={() => handleEdit(u)}>S·ª≠a</button>
                <button className="btn-delete" onClick={() => handleDelete(u.id)}>X√≥a</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </section>
  );
}
